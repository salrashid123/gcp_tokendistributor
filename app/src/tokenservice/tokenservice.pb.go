// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.13.0
// source: src/tokenservice/tokenservice.proto

package tokenservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Secret_SecretType int32

const (
	Secret_RAW  Secret_SecretType = 0
	Secret_TPM  Secret_SecretType = 1
	Secret_TINK Secret_SecretType = 2
)

// Enum value maps for Secret_SecretType.
var (
	Secret_SecretType_name = map[int32]string{
		0: "RAW",
		1: "TPM",
		2: "TINK",
	}
	Secret_SecretType_value = map[string]int32{
		"RAW":  0,
		"TPM":  1,
		"TINK": 2,
	}
)

func (x Secret_SecretType) Enum() *Secret_SecretType {
	p := new(Secret_SecretType)
	*p = x
	return p
}

func (x Secret_SecretType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Secret_SecretType) Descriptor() protoreflect.EnumDescriptor {
	return file_src_tokenservice_tokenservice_proto_enumTypes[0].Descriptor()
}

func (Secret_SecretType) Type() protoreflect.EnumType {
	return &file_src_tokenservice_tokenservice_proto_enumTypes[0]
}

func (x Secret_SecretType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Secret_SecretType.Descriptor instead.
func (Secret_SecretType) EnumDescriptor() ([]byte, []int) {
	return file_src_tokenservice_tokenservice_proto_rawDescGZIP(), []int{1, 0}
}

type TokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	ProcessID string `protobuf:"bytes,2,opt,name=processID,proto3" json:"processID,omitempty"`
}

func (x *TokenRequest) Reset() {
	*x = TokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_tokenservice_tokenservice_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenRequest) ProtoMessage() {}

func (x *TokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_tokenservice_tokenservice_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenRequest.ProtoReflect.Descriptor instead.
func (*TokenRequest) Descriptor() ([]byte, []int) {
	return file_src_tokenservice_tokenservice_proto_rawDescGZIP(), []int{0}
}

func (x *TokenRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *TokenRequest) GetProcessID() string {
	if x != nil {
		return x.ProcessID
	}
	return ""
}

type Secret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type Secret_SecretType `protobuf:"varint,2,opt,name=type,proto3,enum=tokenservice.Secret_SecretType" json:"type,omitempty"`
	Data []byte            `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Secret) Reset() {
	*x = Secret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_tokenservice_tokenservice_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Secret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Secret) ProtoMessage() {}

func (x *Secret) ProtoReflect() protoreflect.Message {
	mi := &file_src_tokenservice_tokenservice_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Secret.ProtoReflect.Descriptor instead.
func (*Secret) Descriptor() ([]byte, []int) {
	return file_src_tokenservice_tokenservice_proto_rawDescGZIP(), []int{1}
}

func (x *Secret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Secret) GetType() Secret_SecretType {
	if x != nil {
		return x.Type
	}
	return Secret_RAW
}

func (x *Secret) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type TokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseID   string    `protobuf:"bytes,1,opt,name=responseID,proto3" json:"responseID,omitempty"`
	InResponseTo string    `protobuf:"bytes,2,opt,name=inResponseTo,proto3" json:"inResponseTo,omitempty"`
	Secrets      []*Secret `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty"`
	Pcr          int64     `protobuf:"varint,4,opt,name=pcr,proto3" json:"pcr,omitempty"`
}

func (x *TokenResponse) Reset() {
	*x = TokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_tokenservice_tokenservice_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenResponse) ProtoMessage() {}

func (x *TokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_tokenservice_tokenservice_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenResponse.ProtoReflect.Descriptor instead.
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return file_src_tokenservice_tokenservice_proto_rawDescGZIP(), []int{2}
}

func (x *TokenResponse) GetResponseID() string {
	if x != nil {
		return x.ResponseID
	}
	return ""
}

func (x *TokenResponse) GetInResponseTo() string {
	if x != nil {
		return x.InResponseTo
	}
	return ""
}

func (x *TokenResponse) GetSecrets() []*Secret {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *TokenResponse) GetPcr() int64 {
	if x != nil {
		return x.Pcr
	}
	return 0
}

type MakeCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	AkName    string `protobuf:"bytes,2,opt,name=akName,proto3" json:"akName,omitempty"`
	EkPub     []byte `protobuf:"bytes,3,opt,name=ekPub,proto3" json:"ekPub,omitempty"` //   TPMT_PUBLIC  use tpm2.DecodePublic, tpm2.LoadExternal..TODO, just send RSAPublicKey
	AkPub     []byte `protobuf:"bytes,4,opt,name=akPub,proto3" json:"akPub,omitempty"`
	AkPubCert []byte `protobuf:"bytes,5,opt,name=akPubCert,proto3" json:"akPubCert,omitempty"`
}

func (x *MakeCredentialRequest) Reset() {
	*x = MakeCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_tokenservice_tokenservice_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeCredentialRequest) ProtoMessage() {}

func (x *MakeCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_tokenservice_tokenservice_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeCredentialRequest.ProtoReflect.Descriptor instead.
func (*MakeCredentialRequest) Descriptor() ([]byte, []int) {
	return file_src_tokenservice_tokenservice_proto_rawDescGZIP(), []int{3}
}

func (x *MakeCredentialRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *MakeCredentialRequest) GetAkName() string {
	if x != nil {
		return x.AkName
	}
	return ""
}

func (x *MakeCredentialRequest) GetEkPub() []byte {
	if x != nil {
		return x.EkPub
	}
	return nil
}

func (x *MakeCredentialRequest) GetAkPub() []byte {
	if x != nil {
		return x.AkPub
	}
	return nil
}

func (x *MakeCredentialRequest) GetAkPubCert() []byte {
	if x != nil {
		return x.AkPubCert
	}
	return nil
}

type MakeCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseID      string `protobuf:"bytes,1,opt,name=responseID,proto3" json:"responseID,omitempty"`
	InResponseTo    string `protobuf:"bytes,2,opt,name=inResponseTo,proto3" json:"inResponseTo,omitempty"`
	Pcr             int32  `protobuf:"varint,3,opt,name=pcr,proto3" json:"pcr,omitempty"`
	CredBlob        []byte `protobuf:"bytes,4,opt,name=credBlob,proto3" json:"credBlob,omitempty"`
	EncryptedSecret []byte `protobuf:"bytes,5,opt,name=encryptedSecret,proto3" json:"encryptedSecret,omitempty"`
}

func (x *MakeCredentialResponse) Reset() {
	*x = MakeCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_tokenservice_tokenservice_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MakeCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MakeCredentialResponse) ProtoMessage() {}

func (x *MakeCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_tokenservice_tokenservice_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MakeCredentialResponse.ProtoReflect.Descriptor instead.
func (*MakeCredentialResponse) Descriptor() ([]byte, []int) {
	return file_src_tokenservice_tokenservice_proto_rawDescGZIP(), []int{4}
}

func (x *MakeCredentialResponse) GetResponseID() string {
	if x != nil {
		return x.ResponseID
	}
	return ""
}

func (x *MakeCredentialResponse) GetInResponseTo() string {
	if x != nil {
		return x.InResponseTo
	}
	return ""
}

func (x *MakeCredentialResponse) GetPcr() int32 {
	if x != nil {
		return x.Pcr
	}
	return 0
}

func (x *MakeCredentialResponse) GetCredBlob() []byte {
	if x != nil {
		return x.CredBlob
	}
	return nil
}

func (x *MakeCredentialResponse) GetEncryptedSecret() []byte {
	if x != nil {
		return x.EncryptedSecret
	}
	return nil
}

type ActivateCredentialRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Secret      string `protobuf:"bytes,2,opt,name=secret,proto3" json:"secret,omitempty"`
	Attestation []byte `protobuf:"bytes,3,opt,name=attestation,proto3" json:"attestation,omitempty"`
	Signature   []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ActivateCredentialRequest) Reset() {
	*x = ActivateCredentialRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_tokenservice_tokenservice_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateCredentialRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateCredentialRequest) ProtoMessage() {}

func (x *ActivateCredentialRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_tokenservice_tokenservice_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateCredentialRequest.ProtoReflect.Descriptor instead.
func (*ActivateCredentialRequest) Descriptor() ([]byte, []int) {
	return file_src_tokenservice_tokenservice_proto_rawDescGZIP(), []int{5}
}

func (x *ActivateCredentialRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ActivateCredentialRequest) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

func (x *ActivateCredentialRequest) GetAttestation() []byte {
	if x != nil {
		return x.Attestation
	}
	return nil
}

func (x *ActivateCredentialRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ActivateCredentialResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseID   string `protobuf:"bytes,1,opt,name=responseID,proto3" json:"responseID,omitempty"`
	InResponseTo string `protobuf:"bytes,2,opt,name=inResponseTo,proto3" json:"inResponseTo,omitempty"`
	Verified     bool   `protobuf:"varint,3,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (x *ActivateCredentialResponse) Reset() {
	*x = ActivateCredentialResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_tokenservice_tokenservice_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateCredentialResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateCredentialResponse) ProtoMessage() {}

func (x *ActivateCredentialResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_tokenservice_tokenservice_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateCredentialResponse.ProtoReflect.Descriptor instead.
func (*ActivateCredentialResponse) Descriptor() ([]byte, []int) {
	return file_src_tokenservice_tokenservice_proto_rawDescGZIP(), []int{6}
}

func (x *ActivateCredentialResponse) GetResponseID() string {
	if x != nil {
		return x.ResponseID
	}
	return ""
}

func (x *ActivateCredentialResponse) GetInResponseTo() string {
	if x != nil {
		return x.InResponseTo
	}
	return ""
}

func (x *ActivateCredentialResponse) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

type OfferQuoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
}

func (x *OfferQuoteRequest) Reset() {
	*x = OfferQuoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_tokenservice_tokenservice_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferQuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferQuoteRequest) ProtoMessage() {}

func (x *OfferQuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_tokenservice_tokenservice_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferQuoteRequest.ProtoReflect.Descriptor instead.
func (*OfferQuoteRequest) Descriptor() ([]byte, []int) {
	return file_src_tokenservice_tokenservice_proto_rawDescGZIP(), []int{7}
}

func (x *OfferQuoteRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

type OfferQuoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseID   string `protobuf:"bytes,1,opt,name=responseID,proto3" json:"responseID,omitempty"`
	InResponseTo string `protobuf:"bytes,2,opt,name=inResponseTo,proto3" json:"inResponseTo,omitempty"`
	Pcr          int32  `protobuf:"varint,3,opt,name=pcr,proto3" json:"pcr,omitempty"`
	Nonce        string `protobuf:"bytes,4,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (x *OfferQuoteResponse) Reset() {
	*x = OfferQuoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_tokenservice_tokenservice_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OfferQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OfferQuoteResponse) ProtoMessage() {}

func (x *OfferQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_tokenservice_tokenservice_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OfferQuoteResponse.ProtoReflect.Descriptor instead.
func (*OfferQuoteResponse) Descriptor() ([]byte, []int) {
	return file_src_tokenservice_tokenservice_proto_rawDescGZIP(), []int{8}
}

func (x *OfferQuoteResponse) GetResponseID() string {
	if x != nil {
		return x.ResponseID
	}
	return ""
}

func (x *OfferQuoteResponse) GetInResponseTo() string {
	if x != nil {
		return x.InResponseTo
	}
	return ""
}

func (x *OfferQuoteResponse) GetPcr() int32 {
	if x != nil {
		return x.Pcr
	}
	return 0
}

func (x *OfferQuoteResponse) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type ProvideQuoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Attestation []byte `protobuf:"bytes,2,opt,name=attestation,proto3" json:"attestation,omitempty"`
	Signature   []byte `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ProvideQuoteRequest) Reset() {
	*x = ProvideQuoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_tokenservice_tokenservice_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvideQuoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvideQuoteRequest) ProtoMessage() {}

func (x *ProvideQuoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_tokenservice_tokenservice_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvideQuoteRequest.ProtoReflect.Descriptor instead.
func (*ProvideQuoteRequest) Descriptor() ([]byte, []int) {
	return file_src_tokenservice_tokenservice_proto_rawDescGZIP(), []int{9}
}

func (x *ProvideQuoteRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ProvideQuoteRequest) GetAttestation() []byte {
	if x != nil {
		return x.Attestation
	}
	return nil
}

func (x *ProvideQuoteRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ProvideQuoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseID   string `protobuf:"bytes,1,opt,name=responseID,proto3" json:"responseID,omitempty"`
	InResponseTo string `protobuf:"bytes,2,opt,name=inResponseTo,proto3" json:"inResponseTo,omitempty"`
	Verified     bool   `protobuf:"varint,3,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (x *ProvideQuoteResponse) Reset() {
	*x = ProvideQuoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_tokenservice_tokenservice_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvideQuoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvideQuoteResponse) ProtoMessage() {}

func (x *ProvideQuoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_tokenservice_tokenservice_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvideQuoteResponse.ProtoReflect.Descriptor instead.
func (*ProvideQuoteResponse) Descriptor() ([]byte, []int) {
	return file_src_tokenservice_tokenservice_proto_rawDescGZIP(), []int{10}
}

func (x *ProvideQuoteResponse) GetResponseID() string {
	if x != nil {
		return x.ResponseID
	}
	return ""
}

func (x *ProvideQuoteResponse) GetInResponseTo() string {
	if x != nil {
		return x.InResponseTo
	}
	return ""
}

func (x *ProvideQuoteResponse) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

type ProvideSigningKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId   string `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Signingkey  []byte `protobuf:"bytes,2,opt,name=signingkey,proto3" json:"signingkey,omitempty"`
	Attestation []byte `protobuf:"bytes,3,opt,name=attestation,proto3" json:"attestation,omitempty"`
	Signature   []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *ProvideSigningKeyRequest) Reset() {
	*x = ProvideSigningKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_tokenservice_tokenservice_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvideSigningKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvideSigningKeyRequest) ProtoMessage() {}

func (x *ProvideSigningKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_src_tokenservice_tokenservice_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvideSigningKeyRequest.ProtoReflect.Descriptor instead.
func (*ProvideSigningKeyRequest) Descriptor() ([]byte, []int) {
	return file_src_tokenservice_tokenservice_proto_rawDescGZIP(), []int{11}
}

func (x *ProvideSigningKeyRequest) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *ProvideSigningKeyRequest) GetSigningkey() []byte {
	if x != nil {
		return x.Signingkey
	}
	return nil
}

func (x *ProvideSigningKeyRequest) GetAttestation() []byte {
	if x != nil {
		return x.Attestation
	}
	return nil
}

func (x *ProvideSigningKeyRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ProvideSigningKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResponseID   string `protobuf:"bytes,1,opt,name=responseID,proto3" json:"responseID,omitempty"`
	InResponseTo string `protobuf:"bytes,2,opt,name=inResponseTo,proto3" json:"inResponseTo,omitempty"`
	Verified     bool   `protobuf:"varint,3,opt,name=verified,proto3" json:"verified,omitempty"`
}

func (x *ProvideSigningKeyResponse) Reset() {
	*x = ProvideSigningKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_src_tokenservice_tokenservice_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvideSigningKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvideSigningKeyResponse) ProtoMessage() {}

func (x *ProvideSigningKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_src_tokenservice_tokenservice_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvideSigningKeyResponse.ProtoReflect.Descriptor instead.
func (*ProvideSigningKeyResponse) Descriptor() ([]byte, []int) {
	return file_src_tokenservice_tokenservice_proto_rawDescGZIP(), []int{12}
}

func (x *ProvideSigningKeyResponse) GetResponseID() string {
	if x != nil {
		return x.ResponseID
	}
	return ""
}

func (x *ProvideSigningKeyResponse) GetInResponseTo() string {
	if x != nil {
		return x.InResponseTo
	}
	return ""
}

func (x *ProvideSigningKeyResponse) GetVerified() bool {
	if x != nil {
		return x.Verified
	}
	return false
}

var File_src_tokenservice_tokenservice_proto protoreflect.FileDescriptor

var file_src_tokenservice_tokenservice_proto_rawDesc = []byte{
	0x0a, 0x23, 0x73, 0x72, 0x63, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x22, 0x4a, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x44, 0x22,
	0x8f, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x28, 0x0a, 0x0a, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x41, 0x57, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x54, 0x50, 0x4d, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4e, 0x4b, 0x10,
	0x02, 0x22, 0x95, 0x01, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x07,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x63, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x63, 0x72, 0x22, 0x97, 0x01, 0x0a, 0x15, 0x4d, 0x61,
	0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x61, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6b, 0x50,
	0x75, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x65, 0x6b, 0x50, 0x75, 0x62, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x6b, 0x50, 0x75, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x61, 0x6b, 0x50, 0x75, 0x62, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6b, 0x50, 0x75, 0x62, 0x43, 0x65,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x6b, 0x50, 0x75, 0x62, 0x43,
	0x65, 0x72, 0x74, 0x22, 0xb4, 0x01, 0x0a, 0x16, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x63, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x70, 0x63, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x72, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x62,
	0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x19, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x7c,
	0x0a, 0x1a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0x31, 0x0a, 0x11,
	0x4f, 0x66, 0x66, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x22,
	0x80, 0x01, 0x0a, 0x12, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x63,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x63, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x22, 0x73, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x51, 0x75, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x76, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x44, 0x12,
	0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22,
	0x98, 0x01, 0x0a, 0x18, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x69, 0x6e, 0x67, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x7b, 0x0a, 0x19, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x32, 0x55, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xe8,
	0x03, 0x0a, 0x08, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x0e, 0x4d,
	0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x23, 0x2e,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x61, 0x6b,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4d, 0x61, 0x6b, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x12, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x27, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0a, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x51, 0x75,
	0x6f, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x66, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x61, 0x6c, 0x72, 0x61, 0x73, 0x68, 0x69,
	0x64, 0x31, 0x32, 0x33, 0x2f, 0x67, 0x63, 0x70, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_src_tokenservice_tokenservice_proto_rawDescOnce sync.Once
	file_src_tokenservice_tokenservice_proto_rawDescData = file_src_tokenservice_tokenservice_proto_rawDesc
)

func file_src_tokenservice_tokenservice_proto_rawDescGZIP() []byte {
	file_src_tokenservice_tokenservice_proto_rawDescOnce.Do(func() {
		file_src_tokenservice_tokenservice_proto_rawDescData = protoimpl.X.CompressGZIP(file_src_tokenservice_tokenservice_proto_rawDescData)
	})
	return file_src_tokenservice_tokenservice_proto_rawDescData
}

var file_src_tokenservice_tokenservice_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_src_tokenservice_tokenservice_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_src_tokenservice_tokenservice_proto_goTypes = []interface{}{
	(Secret_SecretType)(0),             // 0: tokenservice.Secret.SecretType
	(*TokenRequest)(nil),               // 1: tokenservice.TokenRequest
	(*Secret)(nil),                     // 2: tokenservice.Secret
	(*TokenResponse)(nil),              // 3: tokenservice.TokenResponse
	(*MakeCredentialRequest)(nil),      // 4: tokenservice.MakeCredentialRequest
	(*MakeCredentialResponse)(nil),     // 5: tokenservice.MakeCredentialResponse
	(*ActivateCredentialRequest)(nil),  // 6: tokenservice.ActivateCredentialRequest
	(*ActivateCredentialResponse)(nil), // 7: tokenservice.ActivateCredentialResponse
	(*OfferQuoteRequest)(nil),          // 8: tokenservice.OfferQuoteRequest
	(*OfferQuoteResponse)(nil),         // 9: tokenservice.OfferQuoteResponse
	(*ProvideQuoteRequest)(nil),        // 10: tokenservice.ProvideQuoteRequest
	(*ProvideQuoteResponse)(nil),       // 11: tokenservice.ProvideQuoteResponse
	(*ProvideSigningKeyRequest)(nil),   // 12: tokenservice.ProvideSigningKeyRequest
	(*ProvideSigningKeyResponse)(nil),  // 13: tokenservice.ProvideSigningKeyResponse
}
var file_src_tokenservice_tokenservice_proto_depIdxs = []int32{
	0,  // 0: tokenservice.Secret.type:type_name -> tokenservice.Secret.SecretType
	2,  // 1: tokenservice.TokenResponse.secrets:type_name -> tokenservice.Secret
	1,  // 2: tokenservice.TokenService.GetToken:input_type -> tokenservice.TokenRequest
	4,  // 3: tokenservice.Verifier.MakeCredential:input_type -> tokenservice.MakeCredentialRequest
	6,  // 4: tokenservice.Verifier.ActivateCredential:input_type -> tokenservice.ActivateCredentialRequest
	8,  // 5: tokenservice.Verifier.OfferQuote:input_type -> tokenservice.OfferQuoteRequest
	10, // 6: tokenservice.Verifier.ProvideQuote:input_type -> tokenservice.ProvideQuoteRequest
	12, // 7: tokenservice.Verifier.ProvideSigningKey:input_type -> tokenservice.ProvideSigningKeyRequest
	3,  // 8: tokenservice.TokenService.GetToken:output_type -> tokenservice.TokenResponse
	5,  // 9: tokenservice.Verifier.MakeCredential:output_type -> tokenservice.MakeCredentialResponse
	7,  // 10: tokenservice.Verifier.ActivateCredential:output_type -> tokenservice.ActivateCredentialResponse
	9,  // 11: tokenservice.Verifier.OfferQuote:output_type -> tokenservice.OfferQuoteResponse
	11, // 12: tokenservice.Verifier.ProvideQuote:output_type -> tokenservice.ProvideQuoteResponse
	13, // 13: tokenservice.Verifier.ProvideSigningKey:output_type -> tokenservice.ProvideSigningKeyResponse
	8,  // [8:14] is the sub-list for method output_type
	2,  // [2:8] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_src_tokenservice_tokenservice_proto_init() }
func file_src_tokenservice_tokenservice_proto_init() {
	if File_src_tokenservice_tokenservice_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_src_tokenservice_tokenservice_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_tokenservice_tokenservice_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Secret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_tokenservice_tokenservice_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_tokenservice_tokenservice_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_tokenservice_tokenservice_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MakeCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_tokenservice_tokenservice_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateCredentialRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_tokenservice_tokenservice_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateCredentialResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_tokenservice_tokenservice_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferQuoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_tokenservice_tokenservice_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OfferQuoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_tokenservice_tokenservice_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvideQuoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_tokenservice_tokenservice_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvideQuoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_tokenservice_tokenservice_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvideSigningKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_src_tokenservice_tokenservice_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvideSigningKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_src_tokenservice_tokenservice_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_src_tokenservice_tokenservice_proto_goTypes,
		DependencyIndexes: file_src_tokenservice_tokenservice_proto_depIdxs,
		EnumInfos:         file_src_tokenservice_tokenservice_proto_enumTypes,
		MessageInfos:      file_src_tokenservice_tokenservice_proto_msgTypes,
	}.Build()
	File_src_tokenservice_tokenservice_proto = out.File
	file_src_tokenservice_tokenservice_proto_rawDesc = nil
	file_src_tokenservice_tokenservice_proto_goTypes = nil
	file_src_tokenservice_tokenservice_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TokenServiceClient is the client API for TokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TokenServiceClient interface {
	GetToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
}

type tokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenServiceClient(cc grpc.ClientConnInterface) TokenServiceClient {
	return &tokenServiceClient{cc}
}

func (c *tokenServiceClient) GetToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/tokenservice.TokenService/GetToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServiceServer is the server API for TokenService service.
type TokenServiceServer interface {
	GetToken(context.Context, *TokenRequest) (*TokenResponse, error)
}

// UnimplementedTokenServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTokenServiceServer struct {
}

func (*UnimplementedTokenServiceServer) GetToken(context.Context, *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}

func RegisterTokenServiceServer(s *grpc.Server, srv TokenServiceServer) {
	s.RegisterService(&_TokenService_serviceDesc, srv)
}

func _TokenService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenservice.TokenService/GetToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).GetToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TokenService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tokenservice.TokenService",
	HandlerType: (*TokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetToken",
			Handler:    _TokenService_GetToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/tokenservice/tokenservice.proto",
}

// VerifierClient is the client API for Verifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VerifierClient interface {
	MakeCredential(ctx context.Context, in *MakeCredentialRequest, opts ...grpc.CallOption) (*MakeCredentialResponse, error)
	ActivateCredential(ctx context.Context, in *ActivateCredentialRequest, opts ...grpc.CallOption) (*ActivateCredentialResponse, error)
	OfferQuote(ctx context.Context, in *OfferQuoteRequest, opts ...grpc.CallOption) (*OfferQuoteResponse, error)
	ProvideQuote(ctx context.Context, in *ProvideQuoteRequest, opts ...grpc.CallOption) (*ProvideQuoteResponse, error)
	ProvideSigningKey(ctx context.Context, in *ProvideSigningKeyRequest, opts ...grpc.CallOption) (*ProvideSigningKeyResponse, error)
}

type verifierClient struct {
	cc grpc.ClientConnInterface
}

func NewVerifierClient(cc grpc.ClientConnInterface) VerifierClient {
	return &verifierClient{cc}
}

func (c *verifierClient) MakeCredential(ctx context.Context, in *MakeCredentialRequest, opts ...grpc.CallOption) (*MakeCredentialResponse, error) {
	out := new(MakeCredentialResponse)
	err := c.cc.Invoke(ctx, "/tokenservice.Verifier/MakeCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifierClient) ActivateCredential(ctx context.Context, in *ActivateCredentialRequest, opts ...grpc.CallOption) (*ActivateCredentialResponse, error) {
	out := new(ActivateCredentialResponse)
	err := c.cc.Invoke(ctx, "/tokenservice.Verifier/ActivateCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifierClient) OfferQuote(ctx context.Context, in *OfferQuoteRequest, opts ...grpc.CallOption) (*OfferQuoteResponse, error) {
	out := new(OfferQuoteResponse)
	err := c.cc.Invoke(ctx, "/tokenservice.Verifier/OfferQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifierClient) ProvideQuote(ctx context.Context, in *ProvideQuoteRequest, opts ...grpc.CallOption) (*ProvideQuoteResponse, error) {
	out := new(ProvideQuoteResponse)
	err := c.cc.Invoke(ctx, "/tokenservice.Verifier/ProvideQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verifierClient) ProvideSigningKey(ctx context.Context, in *ProvideSigningKeyRequest, opts ...grpc.CallOption) (*ProvideSigningKeyResponse, error) {
	out := new(ProvideSigningKeyResponse)
	err := c.cc.Invoke(ctx, "/tokenservice.Verifier/ProvideSigningKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VerifierServer is the server API for Verifier service.
type VerifierServer interface {
	MakeCredential(context.Context, *MakeCredentialRequest) (*MakeCredentialResponse, error)
	ActivateCredential(context.Context, *ActivateCredentialRequest) (*ActivateCredentialResponse, error)
	OfferQuote(context.Context, *OfferQuoteRequest) (*OfferQuoteResponse, error)
	ProvideQuote(context.Context, *ProvideQuoteRequest) (*ProvideQuoteResponse, error)
	ProvideSigningKey(context.Context, *ProvideSigningKeyRequest) (*ProvideSigningKeyResponse, error)
}

// UnimplementedVerifierServer can be embedded to have forward compatible implementations.
type UnimplementedVerifierServer struct {
}

func (*UnimplementedVerifierServer) MakeCredential(context.Context, *MakeCredentialRequest) (*MakeCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeCredential not implemented")
}
func (*UnimplementedVerifierServer) ActivateCredential(context.Context, *ActivateCredentialRequest) (*ActivateCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateCredential not implemented")
}
func (*UnimplementedVerifierServer) OfferQuote(context.Context, *OfferQuoteRequest) (*OfferQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OfferQuote not implemented")
}
func (*UnimplementedVerifierServer) ProvideQuote(context.Context, *ProvideQuoteRequest) (*ProvideQuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvideQuote not implemented")
}
func (*UnimplementedVerifierServer) ProvideSigningKey(context.Context, *ProvideSigningKeyRequest) (*ProvideSigningKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProvideSigningKey not implemented")
}

func RegisterVerifierServer(s *grpc.Server, srv VerifierServer) {
	s.RegisterService(&_Verifier_serviceDesc, srv)
}

func _Verifier_MakeCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServer).MakeCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenservice.Verifier/MakeCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServer).MakeCredential(ctx, req.(*MakeCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Verifier_ActivateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServer).ActivateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenservice.Verifier/ActivateCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServer).ActivateCredential(ctx, req.(*ActivateCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Verifier_OfferQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OfferQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServer).OfferQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenservice.Verifier/OfferQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServer).OfferQuote(ctx, req.(*OfferQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Verifier_ProvideQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvideQuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServer).ProvideQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenservice.Verifier/ProvideQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServer).ProvideQuote(ctx, req.(*ProvideQuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Verifier_ProvideSigningKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvideSigningKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerifierServer).ProvideSigningKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tokenservice.Verifier/ProvideSigningKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerifierServer).ProvideSigningKey(ctx, req.(*ProvideSigningKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Verifier_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tokenservice.Verifier",
	HandlerType: (*VerifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MakeCredential",
			Handler:    _Verifier_MakeCredential_Handler,
		},
		{
			MethodName: "ActivateCredential",
			Handler:    _Verifier_ActivateCredential_Handler,
		},
		{
			MethodName: "OfferQuote",
			Handler:    _Verifier_OfferQuote_Handler,
		},
		{
			MethodName: "ProvideQuote",
			Handler:    _Verifier_ProvideQuote_Handler,
		},
		{
			MethodName: "ProvideSigningKey",
			Handler:    _Verifier_ProvideSigningKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/tokenservice/tokenservice.proto",
}
