syntax = "proto3";

package tokenservice;

option go_package = "github.com/salrashid123/gcp_tokendistributor/tokenservice";

service TokenService {
  rpc GetToken (TokenRequest) returns (TokenResponse) {}
}

service Verifier {
  rpc MakeCredential (MakeCredentialRequest) returns (MakeCredentialResponse) { }
  rpc ActivateCredential (ActivateCredentialRequest) returns (ActivateCredentialResponse) { }
  rpc OfferQuote (OfferQuoteRequest) returns (OfferQuoteResponse) { }
  rpc ProvideQuote (ProvideQuoteRequest) returns (ProvideQuoteResponse) { }
  rpc ProvideSigningKey (ProvideSigningKeyRequest) returns (ProvideSigningKeyResponse) { }
}

message TokenRequest {
  string requestId = 1;
  string processID = 2;
}

message Secret {
  string name = 1;
  SecretType type = 2;
  bytes data = 3;

  enum SecretType {
    RAW = 0;
    TPM = 1;
    TINK = 2;
  }  
}

message TokenResponse {
  string responseID = 1;
  string inResponseTo = 2;
  repeated Secret secrets = 3;
  int64 pcr = 4;
}



message MakeCredentialRequest {
  string requestId = 1;
  string akName = 2;  
  bytes ekPub = 3; //   TPMT_PUBLIC  use tpm2.DecodePublic, tpm2.LoadExternal..TODO, just send RSAPublicKey
  bytes akPub = 4;
  bytes akPubCert = 5;
}

message MakeCredentialResponse {
  string responseID = 1;
  string inResponseTo = 2;
  int32 pcr = 3;
  bytes credBlob = 4;
  bytes encryptedSecret = 5;
}

message ActivateCredentialRequest {
  string requestId = 1;
  string secret = 2;  
  bytes attestation = 3;
  bytes signature = 4;
}

message ActivateCredentialResponse {
  string responseID = 1;
  string inResponseTo = 2;
  bool verified = 3;
}

message OfferQuoteRequest {
  string requestId = 1;
}

message OfferQuoteResponse {
  string responseID = 1;
  string inResponseTo = 2;
  int32 pcr = 3;
  string nonce = 4;
}

message ProvideQuoteRequest {
  string requestId = 1;
  bytes attestation = 2;
  bytes signature = 3;    
}

message ProvideQuoteResponse {
  string responseID = 1;
  string inResponseTo = 2;
  bool verified = 3;
}

message ProvideSigningKeyRequest {
  string requestId = 1;
  bytes signingkey = 2;
  bytes attestation = 3;
  bytes signature = 4;    
}

message ProvideSigningKeyResponse {
  string responseID = 1;
  string inResponseTo = 2;
  bool verified = 3;
}